version: "3.9"

name: price-compare

services:
  mongo:
    image: mongo:6
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "mongodb://localhost:27017/test", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 15s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # dashboard
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    command: server /data --console-address ":9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 5s
      retries: 5

  file-ingest:
    build:
      context: .
      dockerfile: file-ingest-service/Dockerfile
      args:
        MODULE: file-ingest-service
    image: pc-file-ingest:dev
    depends_on:
      mongo: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      minio: { condition: service_healthy }
    environment:
      QUARKUS_HTTP_PORT: "8080"
      # ---- Mongo ----
      QUARKUS_MONGODB_CONNECTION_STRING: "mongodb://mongo:27017/pc"
      # ---- RabbitMQ (ajuste para suas channels) ----
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: "5672"
      RABBITMQ_USER: "guest"
      RABBITMQ_PASSWORD: "guest"
      # ---- MinIO / S3 ----
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "minio"
      MINIO_SECRET_KEY: "minio123"
      MINIO_BUCKET: "ingest"
    ports:
      - "8081:8080"

  etl-processor:
    build:
      context: .
      dockerfile: etl-processor-service/Dockerfile
      args:
        MODULE: etl-processor-service
    image: pc-etl:dev
    depends_on:
      mongo: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      minio: { condition: service_healthy }
      file-ingest:
        condition: service_started
    environment:
      QUARKUS_HTTP_PORT: "8080"
      QUARKUS_MONGODB_CONNECTION_STRING: "mongodb://mongo:27017/pc"
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: "5672"
      RABBITMQ_USER: "guest"
      RABBITMQ_PASSWORD: "guest"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "minio"
      MINIO_SECRET_KEY: "minio123"
      MINIO_BUCKET: "staging"
    ports:
      - "8082:8080"

  product-compare:
    build:
      context: .
      dockerfile: product-compare-service/Dockerfile
      args:
        MODULE: product-compare-service
    image: pc-compare-prod:dev
    depends_on:
      mongo: { condition: service_healthy }
    environment:
      QUARKUS_HTTP_PORT: "8080"
      QUARKUS_MONGODB_CONNECTION_STRING: "mongodb://mongo:27017/pc"
    ports:
      - "8083:8080"

  category-compare:
    build:
      context: .
      dockerfile: category-compare-service/Dockerfile
    image: pc-compare-cat:dev
    depends_on:
      mongo: { condition: service_healthy }
    environment:
      QUARKUS_HTTP_PORT: "8080"
      QUARKUS_MONGODB_CONNECTION_STRING: "mongodb://mongo:27017/pc"
    ports:
      - "8084:8080"

volumes:
  mongo_data:
  minio_data:
